{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNHaHf6cPB2YwLnvjOQGlV0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/arishma108/QuantumComputing/blob/master/IBM%20Quantum%20Challenge%202024/vqe.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 384
        },
        "id": "iL5aMDETf5zs",
        "outputId": "90d86744-3c4c-47b0-f693-8025b43d42ea"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'qiskit_aer'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-c58e6d8024a6>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mqiskit_aer\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mAerSimulator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mlogging\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtyping\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mOptional\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'qiskit_aer'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ],
      "source": [
        "from qiskit_aer import AerSimulator\n",
        "import logging\n",
        "from typing import Optional\n",
        "import time\n",
        "import numpy as np\n",
        "from scipy.optimize import minimize\n",
        "\n",
        "from qiskit import QuantumCircuit\n",
        "from qiskit_ibm_runtime import (\n",
        "    EstimatorV2 as Estimator,\n",
        "    SamplerV2 as Sampler,\n",
        "    QiskitRuntimeService,\n",
        "    Session,\n",
        ")\n",
        "from qiskit.transpiler.preset_passmanagers import generate_preset_pass_manager\n",
        "from qiskit_serverless import (\n",
        "    distribute_task,\n",
        "    get_arguments,\n",
        "    get,\n",
        "    save_result,\n",
        ")\n",
        "\n",
        "def run(params, ansatz, hamiltonian, estimator, callback_dict):\n",
        "    \"\"\"Return callback function that uses Estimator instance,\n",
        "    and stores intermediate values into a dictionary.\n",
        "\n",
        "    Parameters:\n",
        "        params (ndarray): Array of ansatz parameters\n",
        "        ansatz (QuantumCircuit): Parameterized ansatz circuit\n",
        "        hamiltonian (SparsePauliOp): Operator representation of Hamiltonian\n",
        "        estimator (Estimator): Estimator primitive instance\n",
        "        callback_dict (dict): Mutable dict for storing values\n",
        "\n",
        "    Returns:\n",
        "        Callable: Callback function object\n",
        "    \"\"\"\n",
        "    result = estimator.run([(ansatz, [hamiltonian], [params])]).result()\n",
        "    energy = result[0].data.evs[0]\n",
        "\n",
        "    # Keep track of the number of iterations\n",
        "    callback_dict[\"iters\"] += 1\n",
        "    # Set the prev_vector to the latest one\n",
        "    callback_dict[\"prev_vector\"] = params\n",
        "    # Compute the value of the cost function at the current vector\n",
        "    callback_dict[\"cost_history\"].append(energy)\n",
        "    # Grab the current time\n",
        "    current_time = time.perf_counter()\n",
        "    # Find the total time of the execute (after the 1st iteration)\n",
        "    if callback_dict[\"iters\"] > 1:\n",
        "        callback_dict[\"_total_time\"] += current_time - callback_dict[\"_prev_time\"]\n",
        "    # Set the previous time to the current time\n",
        "    callback_dict[\"_prev_time\"] = current_time\n",
        "    # Compute the average time per iteration and round it\n",
        "    time_str = (\n",
        "        round(callback_dict[\"_total_time\"] / (callback_dict[\"iters\"] - 1), 2)\n",
        "        if callback_dict[\"_total_time\"]\n",
        "        else \"-\"\n",
        "    )\n",
        "    # Print to screen on single line\n",
        "    print(\n",
        "        \"Iters. done: {} [Avg. time per iter: {}]\".format(\n",
        "            callback_dict[\"iters\"], time_str\n",
        "        ),\n",
        "        end=\"\\r\",\n",
        "        flush=True,\n",
        "    )\n",
        "\n",
        "    return energy, result\n",
        "\n",
        "\n",
        "def cost_func(*args, **kwargs):\n",
        "    \"\"\"Return estimate of energy from estimator\n",
        "\n",
        "    Parameters:\n",
        "        params (ndarray): Array of ansatz parameters\n",
        "        ansatz (QuantumCircuit): Parameterized ansatz circuit\n",
        "        hamiltonian (SparsePauliOp): Operator representation of Hamiltonian\n",
        "        estimator (Estimator): Estimator primitive instance\n",
        "\n",
        "    Returns:\n",
        "        float: Energy estimate\n",
        "    \"\"\"\n",
        "    energy, result = run(*args, **kwargs)\n",
        "    return energy\n",
        "\n",
        "\n",
        "def run_vqe(initial_parameters, ansatz, operator, estimator, method):\n",
        "    callback_dict = {\n",
        "        \"prev_vector\": None,\n",
        "        \"iters\": 0,\n",
        "        \"cost_history\": [],\n",
        "        \"_total_time\": 0,\n",
        "        \"_prev_time\": None,\n",
        "    }\n",
        "\n",
        "    result = minimize(\n",
        "        cost_func,\n",
        "        initial_parameters,\n",
        "        args=(ansatz, operator, estimator, callback_dict),\n",
        "        method=method,\n",
        "    )\n",
        "    return result, callback_dict\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    arguments = get_arguments()\n",
        "\n",
        "    service = arguments.get(\"service\")\n",
        "\n",
        "    ansatz = arguments.get(\"ansatz\")\n",
        "    operator = arguments.get(\"operator\")\n",
        "    method = arguments.get(\"method\", \"COBYLA\")\n",
        "    initial_parameters = arguments.get(\"initial_parameters\")\n",
        "\n",
        "    if initial_parameters is None:\n",
        "        initial_parameters = 2 * np.pi * np.random.rand(ansatz.num_parameters)\n",
        "\n",
        "\n",
        "    if service:\n",
        "        backend = service.least_busy(operational=True, simulator=False)\n",
        "    else:\n",
        "        backend = AerSimulator(method='density_matrix')\n",
        "\n",
        "    if initial_parameters is None:\n",
        "        initial_parameters = 2 * np.pi * np.random.rand(ansatz.num_parameters)\n",
        "\n",
        "    if service:\n",
        "        with Session(service=service, backend=backend) as session:\n",
        "            estimator = Estimator(session=session)\n",
        "            vqe_result, callback_dict = run_vqe(\n",
        "                initial_parameters=initial_parameters,\n",
        "                ansatz=ansatz,\n",
        "                operator=operator,\n",
        "                estimator=estimator,\n",
        "                method=method,\n",
        "            )\n",
        "    else:\n",
        "        estimator = Estimator(backend=backend)\n",
        "        vqe_result, callback_dict = run_vqe(\n",
        "            initial_parameters=initial_parameters,\n",
        "            ansatz=ansatz,\n",
        "            operator=operator,\n",
        "            estimator=estimator,\n",
        "            method=method,\n",
        "        )\n",
        "\n",
        "\n",
        "    save_result(\n",
        "        {\n",
        "            \"optimal_point\": vqe_result.x.tolist(),\n",
        "            \"optimal_value\": vqe_result.fun,\n",
        "            \"optimizer_time\": callback_dict.get(\"_total_time\", 0),\n",
        "             \"iters\": callback_dict[\"iters\"],\n",
        "            \"cost_history\" : callback_dict[\"cost_history\"]\n",
        "        }\n",
        "    )"
      ]
    }
  ]
}